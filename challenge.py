from sympy import mod_inverse
from Crypto.Util.number import long_to_bytes

# Example prime factors (hypothetical, for demonstration purposes only)
p = 107360239697077295995220019061353373487223563413076731286885650365864394392517
q = 109890057204350838356446569350139034993626577243853122717748220863773635186837

# Given values
n = 118000799908838573008587015642664363566519545515561476618238867276569441141958591918706674138129925886726795395426253808160643090073025914968970154637651378369651692024407083307072590517721408330134911899484242125114647647576310640820852972549481838556021686062523417764386877046532953466755455006932994325637
e = 65537
ct = 86466740702209933098332469622197745432538806061898447729456426435251471985777785570471597644110556974597249253274803599731367448200091822130585244117284429806931621094961530571564940253835672459192353779305211584334727323731808999113404234517202766776532733475725720669598416567705731189673580379302209132941

# Compute Ï†(n)
phi = (p - 1) * (q - 1)

# Compute the private exponent d
d = mod_inverse(e, phi)

# Decrypt the ciphertext
plaintext_long = pow(ct, d, n)
plaintext_bytes = long_to_bytes(plaintext_long)
print("Decrypted message:", plaintext_bytes.decode('utf-8'))
